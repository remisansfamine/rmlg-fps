# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _physics
else:
    import _physics

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class vec3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_physics.vec3_x_get, _physics.vec3_x_set)
    y = property(_physics.vec3_y_get, _physics.vec3_y_set)
    z = property(_physics.vec3_z_get, _physics.vec3_z_set)

    def __init__(self):
        _physics.vec3_swiginit(self, _physics.new_vec3())
    __swig_destroy__ = _physics.delete_vec3

# Register vec3 in _physics:
_physics.vec3_swigregister(vec3)

class Transform(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, gameObject):
        _physics.Transform_swiginit(self, _physics.new_Transform(gameObject))
    m_position = property(_physics.Transform_m_position_get, _physics.Transform_m_position_set)
    m_rotation = property(_physics.Transform_m_rotation_get, _physics.Transform_m_rotation_set)
    m_scale = property(_physics.Transform_m_scale_get, _physics.Transform_m_scale_set)

    def getGOParent(self):
        return _physics.Transform_getGOParent(self)

    def getParent(self):
        return _physics.Transform_getParent(self)

    def getChild(self, childIndex):
        return _physics.Transform_getChild(self, childIndex)

    def getGOChild(self, childIndex):
        return _physics.Transform_getGOChild(self, childIndex)

    def getChildrenCount(self):
        return _physics.Transform_getChildrenCount(self)

    def getModel(self):
        return _physics.Transform_getModel(self)

    def getGlobalModel(self):
        return _physics.Transform_getGlobalModel(self)

    def getParentModel(self):
        return _physics.Transform_getParentModel(self)

    def getGlobalRotation(self):
        return _physics.Transform_getGlobalRotation(self)

    def getGlobalPosition(self):
        return _physics.Transform_getGlobalPosition(self)

    def getParentRotation(self):
        return _physics.Transform_getParentRotation(self)

    def getParentPosition(self):
        return _physics.Transform_getParentPosition(self)

    def getForward(self):
        return _physics.Transform_getForward(self)

    def hasParent(self):
        return _physics.Transform_hasParent(self)

    def hasChild(self):
        return _physics.Transform_hasChild(self)

    def setParent(self, *args):
        return _physics.Transform_setParent(self, *args)

    def setChild(self, *args):
        return _physics.Transform_setChild(self, *args)

    def update(self):
        return _physics.Transform_update(self)

    def drawImGui(self):
        return _physics.Transform_drawImGui(self)

    def toString(self):
        return _physics.Transform_toString(self)

    @staticmethod
    def parseComponent(gameObject, iss, parentName):
        return _physics.Transform_parseComponent(gameObject, iss, parentName)
    __swig_destroy__ = _physics.delete_Transform

# Register Transform in _physics:
_physics.Transform_swigregister(Transform)

def Transform_parseComponent(gameObject, iss, parentName):
    return _physics.Transform_parseComponent(gameObject, iss, parentName)

class PyTransform(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_position = property(_physics.PyTransform_m_position_get, _physics.PyTransform_m_position_set)
    m_rotation = property(_physics.PyTransform_m_rotation_get, _physics.PyTransform_m_rotation_set)
    m_scale = property(_physics.PyTransform_m_scale_get, _physics.PyTransform_m_scale_set)

    def __init__(self):
        _physics.PyTransform_swiginit(self, _physics.new_PyTransform())
    __swig_destroy__ = _physics.delete_PyTransform

# Register PyTransform in _physics:
_physics.PyTransform_swigregister(PyTransform)



